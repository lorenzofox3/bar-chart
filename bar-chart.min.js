class e extends HTMLElement{static get observedAttributes(){return["size"]}get value(){return Number(this.getAttribute("value")??"0")}attributeChangedCallback(e,t,n){t!==n&&"size"===e&&this.style.setProperty("--bar-size",`${n}%`)}connectedCallback(){this.hasAttribute("slot")||this.setAttribute("slot","bar-area")}}const t=e=>t=>e.reduceRight(((e,t)=>t(e)),t),n=({domainMin:e,domainMax:t})=>n=>(n-e)/(t-e),a=e=>Math.floor(1e4*e)/100,i=({domainMin:e,domainMax:i})=>{return t([a,(s=1,e=>Math.min(s,e)),(r=0,e=>Math.max(r,e)),n({domainMin:e,domainMax:i})]);var r,s},r=e=>Math.floor(1e4*e)/1e4,s=e=>{const t=document.createElement("template");return t.innerHTML=e,t},o=e=>({localName:t})=>t===e,l=(d="value",e=>e[d]);var d;const c=s('\n    <style>\n        :host {\n            --min-inline-size: 70px;\n            --linear-axis-inline-size: 0px;\n            --bar-color: #426cb3;\n            --_min-col-size: calc((100% - var(--linear-axis-inline-size))/var(--_bar-count, 1));\n            display: grid;\n            grid-template-rows: 1fr auto;\n            grid-template-columns: var(--linear-axis-inline-size) repeat(var(--_bar-count), minmax(var(--_min-col-size),1fr));\n            min-block-size: 350px;\n        }\n\n        :host([horizontal]) {\n            writing-mode: vertical-rl;\n        }\n\n        #category-axis, #bar-area {\n            display: grid;\n            grid-template-columns: repeat(var(--_bar-count), minmax(var(--_min-col-size),1fr));\n            grid-column: 2 / -1;\n        }\n\n        #bar-area {\n            justify-items: center;\n            align-items: flex-end;\n            grid-row: 1;\n        }\n        \n        #linear-axis {\n            grid-column: 1;\n            grid-row: 1;\n        }\n\n        ::slotted(ui-bar) {\n            block-size: var(--bar-size, 0%);\n            inline-size: min(75%, var(--min-inline-size));\n            background-color: var(--bar-color);\n        }\n\n        ::slotted([slot=category]) {\n            display: grid;\n            place-items: center;\n            writing-mode: horizontal-tb;\n        }\n\n    </style>\n    <div id="linear-axis" part="linear-axis">\n        <slot name="linear-axis"></slot>\n    </div>\n    <div id="bar-area" part="bar-area">\n        <slot name="bar-area"></slot>\n    </div>\n    <div id="category-axis" part="category-axis">\n        <slot name="category"></slot>\n    </div>\n    </style>\n');class m extends HTMLElement{#e;static get observedAttributes(){return["domain-min","domain-max","stack"]}get domainMin(){return this.hasAttribute("domain-min")?Number(this.getAttribute("domain-min")):Math.min(...this.#e.assignedElements().map(l))}get domainMax(){return this.hasAttribute("domain-max")?Number(this.getAttribute("domain-max")):Math.max(...this.#e.assignedElements().map(l))}constructor(){super();this.attachShadow({mode:"open"}).append(c.content.cloneNode(!0)),this.#e=this.shadowRoot.querySelector("slot[name=bar-area]"),this.render=this.render.bind(this),this.#e.addEventListener("slotchange",this.render)}attributeChangedCallback(){this.render()}render(){const e=this.#e.assignedElements();this.style.setProperty("--_bar-count",e.length);const n=e.filter(o("ui-bar-group")),a=e.flatMap((e=>[e,...Array.from(e.children)])).filter(o("ui-bar"));n.forEach((e=>e.toggleAttribute("stack",this.hasAttribute("stack"))));const s=this.project=t([r,i(this)]).bind(this);a.forEach((e=>{e.setAttribute("size",s(e.value))})),this.dispatchEvent(new CustomEvent("rendered",{bubbles:!0}))}}const u=s('\n<style>\n  :host {\n      block-size: 100%;\n      inline-size: 100%;\n      display: grid;\n      grid-auto-flow: column;\n      grid-auto-columns: 1fr;\n      align-items: end;\n      justify-items: center;\n  }\n  \n  :host([stack]) {\n      display: flex;\n      flex-direction: column;\n      justify-content: flex-end;\n      align-items: center;\n}\n  \n  ::slotted(ui-bar) {\n      block-size: var(--bar-size, 0%);\n      inline-size: min(75%, 80px);\n      background: var(--bar-color);\n  }\n</style>\n<slot name="bar-area"></slot>\n');class b extends HTMLElement{#t;get value(){const e=this.#t.assignedElements();return this.hasAttribute("stack")?e.reduce(((e,{value:t})=>e+t),0):Math.max(...e.map(l))}constructor(){super();const e=this.attachShadow({mode:"open"});e.appendChild(u.content.cloneNode(!0)),this.#t=e.querySelector("slot[name=bar-area]")}connectedCallback(){this.hasAttribute("slot")||this.setAttribute("slot","bar-area")}}customElements.define("ui-bar",e),customElements.define("ui-bar-group",b),customElements.define("ui-bar-area",m);
